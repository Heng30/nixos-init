!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/blue/lang/learn-zone/learn-dwm/dwm-6.2/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/p5.9.20210110.0/
${OBJ}	Makefile	/^${OBJ}: config.h config.mk$/;"	t
.c.o	Makefile	/^.c.o:$/;"	t
Arg	dwm.c	/^} Arg;$/;"	t	typeref:union:__anon0f53a99e060a	file:
BETWEEN	util.h	/^#define BETWEEN(/;"	d
BUGS	dwm.1	/^.SH BUGS$/;"	s	title:DWM
BUTTONMASK	dwm.c	/^#define BUTTONMASK /;"	d	file:
Button	dwm.c	/^} Button;$/;"	t	typeref:struct:__anon0f53a99e0708	file:
CC	config.mk	/^CC = cc$/;"	m
CFLAGS	config.mk	/^CFLAGS   = -std=c99 -pedantic -Wall -Wno-deprecated-declarations -Os ${INCS} ${CPPFLAGS}$/;"	m
CLEANMASK	dwm.c	/^#define CLEANMASK(/;"	d	file:
CPPFLAGS	config.mk	/^CPPFLAGS = -D_DEFAULT_SOURCE -D_BSD_SOURCE -D_POSIX_C_SOURCE=2 -DVERSION=\\"${VERSION}\\"$/;"	m
CUSTOMIZATION	dwm.1	/^.SH CUSTOMIZATION$/;"	s	title:DWM
Client	dwm.c	/^struct Client {$/;"	s	file:
Client	dwm.c	/^typedef struct Client Client;$/;"	t	typeref:struct:Client	file:
ClkClientWin	dwm.c	/^    ClkClientWin,$/;"	e	enum:__anon0f53a99e0503	file:
ClkLast	dwm.c	/^    ClkLast$/;"	e	enum:__anon0f53a99e0503	file:
ClkLtSymbol	dwm.c	/^    ClkLtSymbol,$/;"	e	enum:__anon0f53a99e0503	file:
ClkRootWin	dwm.c	/^    ClkRootWin,$/;"	e	enum:__anon0f53a99e0503	file:
ClkStatusText	dwm.c	/^    ClkStatusText,$/;"	e	enum:__anon0f53a99e0503	file:
ClkTagBar	dwm.c	/^    ClkTagBar,$/;"	e	enum:__anon0f53a99e0503	file:
ClkWinTitle	dwm.c	/^    ClkWinTitle,$/;"	e	enum:__anon0f53a99e0503	file:
Clr	drw.h	/^typedef XftColor Clr;$/;"	t	typeref:typename:XftColor
ColBg	drw.h	/^enum { ColFg, ColBg, ColBorder }; \/* Clr scheme index *\/$/;"	e	enum:__anon0f5116480203
ColBorder	drw.h	/^enum { ColFg, ColBg, ColBorder }; \/* Clr scheme index *\/$/;"	e	enum:__anon0f5116480203
ColFg	drw.h	/^enum { ColFg, ColBg, ColBorder }; \/* Clr scheme index *\/$/;"	e	enum:__anon0f5116480203
Cur	drw.h	/^} Cur;$/;"	t	typeref:struct:__anon0f5116480108
CurLast	dwm.c	/^enum { CurNormal, CurResize, CurMove, CurLast }; \/* cursor *\/$/;"	e	enum:__anon0f53a99e0103	file:
CurMove	dwm.c	/^enum { CurNormal, CurResize, CurMove, CurLast }; \/* cursor *\/$/;"	e	enum:__anon0f53a99e0103	file:
CurNormal	dwm.c	/^enum { CurNormal, CurResize, CurMove, CurLast }; \/* cursor *\/$/;"	e	enum:__anon0f53a99e0103	file:
CurResize	dwm.c	/^enum { CurNormal, CurResize, CurMove, CurLast }; \/* cursor *\/$/;"	e	enum:__anon0f53a99e0103	file:
DESCRIPTION	dwm.1	/^.SH DESCRIPTION$/;"	s	title:DWM
DWM	dwm.1	/^.TH DWM 1 dwm\\-VERSION$/;"	t
Drw	drw.h	/^} Drw;$/;"	t	typeref:struct:__anon0f5116480308
FILES	dwm.1	/^.SH FILES$/;"	s	title:DWM
FREETYPEINC	config.mk	/^FREETYPEINC = \/usr\/include\/freetype2$/;"	m
FREETYPELIBS	config.mk	/^FREETYPELIBS = -lfontconfig -lXft$/;"	m
Fnt	drw.h	/^typedef struct Fnt {$/;"	s
Fnt	drw.h	/^} Fnt;$/;"	t	typeref:struct:Fnt
HEIGHT	dwm.c	/^#define HEIGHT(/;"	d	file:
HIDDEN	dwm.c	/^#define HIDDEN(/;"	d	file:
INCS	config.mk	/^INCS = -I${X11INC} -I${FREETYPEINC}$/;"	m
INTERSECT	dwm.c	/^#define INTERSECT(/;"	d	file:
ISSUES	dwm.1	/^.SH ISSUES$/;"	s	title:DWM
ISVISIBLE	dwm.c	/^#define ISVISIBLE(/;"	d	file:
Key	dwm.c	/^} Key;$/;"	t	typeref:struct:__anon0f53a99e0808	file:
LDFLAGS	config.mk	/^LDFLAGS  = ${LIBS}$/;"	m
LENGTH	dwm.c	/^#define LENGTH(/;"	d	file:
LIBS	config.mk	/^LIBS = -L${X11LIB} -lX11 ${XINERAMALIBS} ${FREETYPELIBS} -lXrender$/;"	m
Layout	dwm.c	/^} Layout;$/;"	t	typeref:struct:__anon0f53a99e0908	file:
MANPREFIX	config.mk	/^MANPREFIX = ${PREFIX}\/share\/man$/;"	m
MAX	util.h	/^#define MAX(/;"	d
MIN	util.h	/^#define MIN(/;"	d
MODKEY	config.def.h	/^#define MODKEY /;"	d
MODKEY	config.h	/^#define MODKEY /;"	d
MOUSEMASK	dwm.c	/^#define MOUSEMASK /;"	d	file:
Monitor	dwm.c	/^struct Monitor {$/;"	s	file:
Monitor	dwm.c	/^typedef struct Monitor Monitor;$/;"	t	typeref:struct:Monitor	file:
NAME	dwm.1	/^.SH NAME$/;"	s	title:DWM
NetActiveWindow	dwm.c	/^    NetActiveWindow,$/;"	e	enum:__anon0f53a99e0303	file:
NetClientList	dwm.c	/^    NetClientList,$/;"	e	enum:__anon0f53a99e0303	file:
NetLast	dwm.c	/^    NetLast$/;"	e	enum:__anon0f53a99e0303	file:
NetSupported	dwm.c	/^    NetSupported,$/;"	e	enum:__anon0f53a99e0303	file:
NetWMCheck	dwm.c	/^    NetWMCheck,$/;"	e	enum:__anon0f53a99e0303	file:
NetWMFullscreen	dwm.c	/^    NetWMFullscreen,$/;"	e	enum:__anon0f53a99e0303	file:
NetWMName	dwm.c	/^    NetWMName,$/;"	e	enum:__anon0f53a99e0303	file:
NetWMState	dwm.c	/^    NetWMState,$/;"	e	enum:__anon0f53a99e0303	file:
NetWMWindowType	dwm.c	/^    NetWMWindowType,$/;"	e	enum:__anon0f53a99e0303	file:
NetWMWindowTypeDialog	dwm.c	/^    NetWMWindowTypeDialog,$/;"	e	enum:__anon0f53a99e0303	file:
NumTags	dwm.c	/^struct NumTags {$/;"	s	file:
OBJ	Makefile	/^OBJ = ${SRC:.c=.o}$/;"	m
OPAQUE	dwm.c	/^#define OPAQUE /;"	d	file:
OPTIONS	dwm.1	/^.SH OPTIONS$/;"	s	title:DWM
PREFIX	config.mk	/^PREFIX = \/usr\/local$/;"	m
Pertag	dwm.c	/^struct Pertag {$/;"	s	file:
Pertag	dwm.c	/^typedef struct Pertag Pertag;$/;"	t	typeref:struct:Pertag	file:
Rule	dwm.c	/^} Rule;$/;"	t	typeref:struct:__anon0f53a99e0a08	file:
SEE	dwm.1	/^.SH SEE ALSO$/;"	s	title:DWM
SHCMD	config.def.h	/^#define SHCMD(/;"	d
SHCMD	config.h	/^#define SHCMD(/;"	d
SRC	Makefile	/^SRC = drw.c dwm.c util.c$/;"	m
SYNOPSIS	dwm.1	/^.SH SYNOPSIS$/;"	s	title:DWM
SchemeHid	dwm.c	/^enum { SchemeNorm, SchemeSel, SchemeHid };       \/* color schemes *\/$/;"	e	enum:__anon0f53a99e0203	file:
SchemeNorm	dwm.c	/^enum { SchemeNorm, SchemeSel, SchemeHid };       \/* color schemes *\/$/;"	e	enum:__anon0f53a99e0203	file:
SchemeSel	dwm.c	/^enum { SchemeNorm, SchemeSel, SchemeHid };       \/* color schemes *\/$/;"	e	enum:__anon0f53a99e0203	file:
TAGKEYS	config.def.h	/^#define TAGKEYS(/;"	d
TAGKEYS	config.h	/^#define TAGKEYS(/;"	d
TAGMASK	dwm.c	/^#define TAGMASK /;"	d	file:
TEXTW	dwm.c	/^#define TEXTW(/;"	d	file:
USAGE	dwm.1	/^.SH USAGE$/;"	s	title:DWM
UTF_INVALID	drw.c	/^#define UTF_INVALID /;"	d	file:
UTF_SIZ	drw.c	/^#define UTF_SIZ /;"	d	file:
VERSION	config.mk	/^VERSION = 6.2$/;"	m
WIDTH	dwm.c	/^#define WIDTH(/;"	d	file:
WMDelete	dwm.c	/^    WMDelete,$/;"	e	enum:__anon0f53a99e0403	file:
WMLast	dwm.c	/^    WMLast$/;"	e	enum:__anon0f53a99e0403	file:
WMProtocols	dwm.c	/^    WMProtocols,$/;"	e	enum:__anon0f53a99e0403	file:
WMState	dwm.c	/^    WMState,$/;"	e	enum:__anon0f53a99e0403	file:
WMTakeFocus	dwm.c	/^    WMTakeFocus,$/;"	e	enum:__anon0f53a99e0403	file:
X11INC	config.mk	/^X11INC = \/usr\/X11R6\/include$/;"	m
X11LIB	config.mk	/^X11LIB = \/usr\/X11R6\/lib$/;"	m
XINERAMALIBS	config.mk	/^XINERAMALIBS  = -lXinerama$/;"	m
__anon0f5116480108	drw.h	/^typedef struct {$/;"	s
__anon0f5116480203	drw.h	/^enum { ColFg, ColBg, ColBorder }; \/* Clr scheme index *\/$/;"	g
__anon0f5116480308	drw.h	/^typedef struct {$/;"	s
__anon0f53a99e0103	dwm.c	/^enum { CurNormal, CurResize, CurMove, CurLast }; \/* cursor *\/$/;"	g	file:
__anon0f53a99e0203	dwm.c	/^enum { SchemeNorm, SchemeSel, SchemeHid };       \/* color schemes *\/$/;"	g	file:
__anon0f53a99e0303	dwm.c	/^enum {$/;"	g	file:
__anon0f53a99e0403	dwm.c	/^enum {$/;"	g	file:
__anon0f53a99e0503	dwm.c	/^enum {$/;"	g	file:
__anon0f53a99e060a	dwm.c	/^typedef union {$/;"	u	file:
__anon0f53a99e0708	dwm.c	/^typedef struct {$/;"	s	file:
__anon0f53a99e0808	dwm.c	/^typedef struct {$/;"	s	file:
__anon0f53a99e0908	dwm.c	/^typedef struct {$/;"	s	file:
__anon0f53a99e0a08	dwm.c	/^typedef struct {$/;"	s	file:
all	Makefile	/^all: options dwm$/;"	t
alphas	config.def.h	/^static const unsigned int alphas[][3]      = {$/;"	v	typeref:typename:const unsigned int[][3]
alphas	config.h	/^static const unsigned int alphas[][3]      = {$/;"	v	typeref:typename:const unsigned int[][3]
applyrules	dwm.c	/^void applyrules(Client *c) {$/;"	f	typeref:typename:void
applysizehints	dwm.c	/^int applysizehints(Client *c, int *x, int *y, int *w, int *h, int interact) {$/;"	f	typeref:typename:int
arg	dwm.c	/^    const Arg arg;$/;"	m	struct:__anon0f53a99e0708	typeref:typename:const Arg	file:
arg	dwm.c	/^    const Arg arg;$/;"	m	struct:__anon0f53a99e0808	typeref:typename:const Arg	file:
arrange	dwm.c	/^    void (*arrange)(Monitor *);$/;"	m	struct:__anon0f53a99e0908	typeref:typename:void (*)(Monitor *)	file:
arrange	dwm.c	/^void arrange(Monitor *m) {$/;"	f	typeref:typename:void
arrangemon	dwm.c	/^void arrangemon(Monitor *m) {$/;"	f	typeref:typename:void
attach	dwm.c	/^void attach(Client *c) {$/;"	f	typeref:typename:void
attachstack	dwm.c	/^void attachstack(Client *c) {$/;"	f	typeref:typename:void
autostartblocksh	dwm.c	/^static const char autostartblocksh[] = "autostart_blocking.sh";$/;"	v	typeref:typename:const char[]	file:
autostartsh	dwm.c	/^static const char autostartsh[] = "autostart.sh";$/;"	v	typeref:typename:const char[]	file:
backlight_down	config.def.h	/^static const char *backlight_down[] = {"\/home\/blue\/.dwm\/backlight-down.sh", NULL};$/;"	v	typeref:typename:const char * []
backlight_down	config.h	/^static const char *backlight_down[] = {"\/home\/blue\/.dwm\/backlight-down.sh", NULL};$/;"	v	typeref:typename:const char * []
backlight_up	config.def.h	/^static const char *backlight_up[] = {"\/home\/blue\/.dwm\/backlight-up.sh", NULL};$/;"	v	typeref:typename:const char * []
backlight_up	config.h	/^static const char *backlight_up[] = {"\/home\/blue\/.dwm\/backlight-up.sh", NULL};$/;"	v	typeref:typename:const char * []
baralpha	config.def.h	/^static const unsigned int baralpha  = 0xd0;$/;"	v	typeref:typename:const unsigned int
baralpha	config.h	/^static const unsigned int baralpha  = 0xd0;$/;"	v	typeref:typename:const unsigned int
barwin	dwm.c	/^    Window barwin;$/;"	m	struct:Monitor	typeref:typename:Window	file:
baseh	dwm.c	/^    int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	typeref:typename:int	file:
basew	dwm.c	/^    int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	typeref:typename:int	file:
bh	dwm.c	/^static int bh, blw = 0;    \/* bar geometry *\/$/;"	v	typeref:typename:int	file:
bluetooth_manager	config.def.h	/^static const char *bluetooth_manager[] = {"\/home\/blue\/.dwm\/bluetooth-manager.sh", NULL};$/;"	v	typeref:typename:const char * []
bluetooth_manager	config.h	/^static const char *bluetooth_manager[] = {"\/home\/blue\/.dwm\/bluetooth-manager.sh", NULL};$/;"	v	typeref:typename:const char * []
blw	dwm.c	/^static int bh, blw = 0;    \/* bar geometry *\/$/;"	v	typeref:typename:int	file:
borderalpha	config.def.h	/^static const unsigned int borderalpha = OPAQUE;$/;"	v	typeref:typename:const unsigned int
borderalpha	config.h	/^static const unsigned int borderalpha = OPAQUE;$/;"	v	typeref:typename:const unsigned int
borderpx	config.def.h	/^static const unsigned int borderpx  = 3;        \/* border pixel of windows *\/$/;"	v	typeref:typename:const unsigned int
borderpx	config.h	/^static const unsigned int borderpx  = 3;        \/* border pixel of windows *\/$/;"	v	typeref:typename:const unsigned int
broken	dwm.c	/^static const char broken[] = "broken";$/;"	v	typeref:typename:const char[]	file:
bt	dwm.c	/^    int bt;             \/* number of tasks *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
btw	dwm.c	/^    int btw;            \/* width of tasks portion of bar *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
button	dwm.c	/^    unsigned int button;$/;"	m	struct:__anon0f53a99e0708	typeref:typename:unsigned int	file:
buttonpress	dwm.c	/^void buttonpress(XEvent *e) {$/;"	f	typeref:typename:void
buttons	config.def.h	/^static Button buttons[] = {$/;"	v	typeref:typename:Button[]
buttons	config.h	/^static Button buttons[] = {$/;"	v	typeref:typename:Button[]
bw	dwm.c	/^    int bw, oldbw;$/;"	m	struct:Client	typeref:typename:int	file:
by	dwm.c	/^    int by;             \/* bar geometry *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
change_wallpaper	config.def.h	/^static const char *change_wallpaper[] = { "\/home\/blue\/.dwm\/change_wallpaper.sh", NULL };$/;"	v	typeref:typename:const char * []
change_wallpaper	config.h	/^static const char *change_wallpaper[] = { "\/home\/blue\/.dwm\/change_wallpaper.sh", NULL };$/;"	v	typeref:typename:const char * []
checkotherwm	dwm.c	/^void checkotherwm(void) {$/;"	f	typeref:typename:void
class	dwm.c	/^    const char *class;$/;"	m	struct:__anon0f53a99e0a08	typeref:typename:const char *	file:
clean	Makefile	/^clean:$/;"	t
cleanup	dwm.c	/^void cleanup(void) {$/;"	f	typeref:typename:void
cleanupmon	dwm.c	/^void cleanupmon(Monitor *mon) {$/;"	f	typeref:typename:void
click	dwm.c	/^    unsigned int click;$/;"	m	struct:__anon0f53a99e0708	typeref:typename:unsigned int	file:
clientmessage	dwm.c	/^void clientmessage(XEvent *e) {$/;"	f	typeref:typename:void
clients	dwm.c	/^    Client *clients;$/;"	m	struct:Monitor	typeref:typename:Client *	file:
cmap	drw.h	/^	Colormap cmap;$/;"	m	struct:__anon0f5116480308	typeref:typename:Colormap
cmap	dwm.c	/^static Colormap cmap;$/;"	v	typeref:typename:Colormap	file:
col_cyan	config.def.h	/^static const char col_cyan[]        = "#005577";$/;"	v	typeref:typename:const char[]
col_cyan	config.h	/^static const char col_cyan[]        = "#005577";$/;"	v	typeref:typename:const char[]
col_gray1	config.def.h	/^static const char col_gray1[]       = "#222222";$/;"	v	typeref:typename:const char[]
col_gray1	config.h	/^static const char col_gray1[]       = "#222222";$/;"	v	typeref:typename:const char[]
col_gray2	config.def.h	/^static const char col_gray2[]       = "#444444";$/;"	v	typeref:typename:const char[]
col_gray2	config.h	/^static const char col_gray2[]       = "#444444";$/;"	v	typeref:typename:const char[]
col_gray3	config.def.h	/^static const char col_gray3[]       = "#bbbbbb";$/;"	v	typeref:typename:const char[]
col_gray3	config.h	/^static const char col_gray3[]       = "#bbbbbb";$/;"	v	typeref:typename:const char[]
col_gray4	config.def.h	/^static const char col_gray4[]       = "#eeeeee";$/;"	v	typeref:typename:const char[]
col_gray4	config.h	/^static const char col_gray4[]       = "#eeeeee";$/;"	v	typeref:typename:const char[]
col_pink	config.def.h	/^static const char col_pink[]        = "#ff3399";$/;"	v	typeref:typename:const char[]
col_pink	config.h	/^static const char col_pink[]        = "#ff3399";$/;"	v	typeref:typename:const char[]
colors	config.def.h	/^static const char *colors[][3]      = {$/;"	v	typeref:typename:const char * [][3]
colors	config.h	/^static const char *colors[][3]      = {$/;"	v	typeref:typename:const char * [][3]
config.h	Makefile	/^config.h:$/;"	t
configure	dwm.c	/^void configure(Client *c) {$/;"	f	typeref:typename:void
configurenotify	dwm.c	/^void configurenotify(XEvent *e) {$/;"	f	typeref:typename:void
configurerequest	dwm.c	/^void configurerequest(XEvent *e) {$/;"	f	typeref:typename:void
createmon	dwm.c	/^Monitor *createmon(void) {$/;"	f	typeref:typename:Monitor *
cursor	drw.h	/^	Cursor cursor;$/;"	m	struct:__anon0f5116480108	typeref:typename:Cursor
cursor	dwm.c	/^static Cur *cursor[CurLast];$/;"	v	typeref:typename:Cur * []	file:
curtag	dwm.c	/^    unsigned int curtag, prevtag;   \/* current and previous tag *\/$/;"	m	struct:Pertag	typeref:typename:unsigned int	file:
defaultgaps	dwm.c	/^void defaultgaps(const Arg *arg) { setgaps(gappoh, gappov, gappih, gappiv); }$/;"	f	typeref:typename:void
depth	drw.h	/^	unsigned int depth;$/;"	m	struct:__anon0f5116480308	typeref:typename:unsigned int
depth	dwm.c	/^static int depth;$/;"	v	typeref:typename:int	file:
destroynotify	dwm.c	/^void destroynotify(XEvent *e) {$/;"	f	typeref:typename:void
detach	dwm.c	/^void detach(Client *c) {$/;"	f	typeref:typename:void
detachstack	dwm.c	/^void detachstack(Client *c) {$/;"	f	typeref:typename:void
die	util.c	/^void die(const char *fmt, ...) {$/;"	f	typeref:typename:void
dirtomon	dwm.c	/^Monitor *dirtomon(int dir) {$/;"	f	typeref:typename:Monitor *
dist	Makefile	/^dist: clean$/;"	t
dmenucmd	config.def.h	/^static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray/;"	v	typeref:typename:const char * []
dmenucmd	config.h	/^static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray/;"	v	typeref:typename:const char * []
dmenufont	config.def.h	/^static const char dmenufont[]       = "DejaVuSansMono:size=8";$/;"	v	typeref:typename:const char[]
dmenufont	config.h	/^static const char dmenufont[]       = "DejaVuSansMono:size=8";$/;"	v	typeref:typename:const char[]
dmenumon	config.def.h	/^static char dmenumon[2] = "0"; \/* component of dmenucmd, manipulated in spawn() *\/$/;"	v	typeref:typename:char[2]
dmenumon	config.h	/^static char dmenumon[2] = "0"; \/* component of dmenucmd, manipulated in spawn() *\/$/;"	v	typeref:typename:char[2]
dpy	drw.h	/^	Display *dpy;$/;"	m	struct:Fnt	typeref:typename:Display *
dpy	drw.h	/^	Display *dpy;$/;"	m	struct:__anon0f5116480308	typeref:typename:Display *
dpy	dwm.c	/^static Display *dpy; \/\/ x window display handler which connect to x server$/;"	v	typeref:typename:Display *	file:
drawable	drw.h	/^	Drawable drawable;$/;"	m	struct:__anon0f5116480308	typeref:typename:Drawable
drawbar	dwm.c	/^void drawbar(Monitor *m) {$/;"	f	typeref:typename:void
drawbars	dwm.c	/^void drawbars(void) {$/;"	f	typeref:typename:void
drw	dwm.c	/^static Drw *drw;$/;"	v	typeref:typename:Drw *	file:
drw_clr_create	drw.c	/^void drw_clr_create(Drw *drw, Clr *dest, const char *clrname,$/;"	f	typeref:typename:void
drw_create	drw.c	/^Drw *drw_create(Display *dpy, int screen, Window root, unsigned int w,$/;"	f	typeref:typename:Drw *
drw_cur_create	drw.c	/^Cur *drw_cur_create(Drw *drw, int shape) {$/;"	f	typeref:typename:Cur *
drw_cur_free	drw.c	/^void drw_cur_free(Drw *drw, Cur *cursor) {$/;"	f	typeref:typename:void
drw_font_getexts	drw.c	/^void drw_font_getexts(Fnt *font, const char *text, unsigned int len,$/;"	f	typeref:typename:void
drw_fontset_create	drw.c	/^Fnt *drw_fontset_create(Drw *drw, const char *fonts[], size_t fontcount) {$/;"	f	typeref:typename:Fnt *
drw_fontset_free	drw.c	/^void drw_fontset_free(Fnt *font) {$/;"	f	typeref:typename:void
drw_fontset_getwidth	drw.c	/^unsigned int drw_fontset_getwidth(Drw *drw, const char *text) {$/;"	f	typeref:typename:unsigned int
drw_free	drw.c	/^void drw_free(Drw *drw) {$/;"	f	typeref:typename:void
drw_map	drw.c	/^void drw_map(Drw *drw, Window win, int x, int y, unsigned int w,$/;"	f	typeref:typename:void
drw_rect	drw.c	/^void drw_rect(Drw *drw, int x, int y, unsigned int w, unsigned int h,$/;"	f	typeref:typename:void
drw_resize	drw.c	/^void drw_resize(Drw *drw, unsigned int w, unsigned int h) {$/;"	f	typeref:typename:void
drw_scm_create	drw.c	/^Clr *drw_scm_create(Drw *drw, const char *clrnames[],$/;"	f	typeref:typename:Clr *
drw_setfontset	drw.c	/^void drw_setfontset(Drw *drw, Fnt *set) {$/;"	f	typeref:typename:void
drw_setscheme	drw.c	/^void drw_setscheme(Drw *drw, Clr *scm) {$/;"	f	typeref:typename:void
drw_text	drw.c	/^int drw_text(Drw *drw, int x, int y, unsigned int w, unsigned int h,$/;"	f	typeref:typename:int
dwm	Makefile	/^dwm: ${OBJ}$/;"	t
dwmdir	dwm.c	/^static const char dwmdir[] = "dwm";$/;"	v	typeref:typename:const char[]	file:
ecalloc	util.c	/^void *ecalloc(size_t nmemb, size_t size) {$/;"	f	typeref:typename:void *
enablegaps	dwm.c	/^static int enablegaps = 1; \/* enables gaps, used by togglegaps *\/$/;"	v	typeref:typename:int	file:
enternotify	dwm.c	/^void enternotify(XEvent *e) {$/;"	f	typeref:typename:void
expose	dwm.c	/^void expose(XEvent *e) {$/;"	f	typeref:typename:void
f	dwm.c	/^    float f;$/;"	m	union:__anon0f53a99e060a	typeref:typename:float	file:
focus	dwm.c	/^void focus(Client *c) {$/;"	f	typeref:typename:void
focusin	dwm.c	/^void focusin(XEvent *e) {$/;"	f	typeref:typename:void
focusmon	dwm.c	/^void focusmon(const Arg *arg) {$/;"	f	typeref:typename:void
focusstack	dwm.c	/^void focusstack(int inc, int hid) {$/;"	f	typeref:typename:void
focusstackhid	dwm.c	/^void focusstackhid(const Arg *arg) { focusstack(arg->i, 1); }$/;"	f	typeref:typename:void
focusstackvis	dwm.c	/^void focusstackvis(const Arg *arg) { focusstack(arg->i, 0); }$/;"	f	typeref:typename:void
fonts	config.def.h	/^static const char *fonts[]          = { "DejaVuSansMono:size=8", "Symbola:size=8" };$/;"	v	typeref:typename:const char * []
fonts	config.h	/^static const char *fonts[]          = { "DejaVuSansMono:size=8", "Symbola:size=8" };$/;"	v	typeref:typename:const char * []
fonts	drw.h	/^	Fnt *fonts;$/;"	m	struct:__anon0f5116480308	typeref:typename:Fnt *
func	dwm.c	/^    void (*func)(const Arg *);$/;"	m	struct:__anon0f53a99e0808	typeref:typename:void (*)(const Arg *)	file:
func	dwm.c	/^    void (*func)(const Arg *arg);$/;"	m	struct:__anon0f53a99e0708	typeref:typename:void (*)(const Arg * arg)	file:
gappih	config.def.h	/^static const unsigned int gappih    = 3;       \/* horiz inner gap between windows *\/$/;"	v	typeref:typename:const unsigned int
gappih	config.h	/^static const unsigned int gappih    = 3;       \/* horiz inner gap between windows *\/$/;"	v	typeref:typename:const unsigned int
gappih	dwm.c	/^    int gappih;         \/* horizontal gap between windows *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
gappiv	config.def.h	/^static const unsigned int gappiv    = 3;       \/* vert inner gap between windows *\/$/;"	v	typeref:typename:const unsigned int
gappiv	config.h	/^static const unsigned int gappiv    = 3;       \/* vert inner gap between windows *\/$/;"	v	typeref:typename:const unsigned int
gappiv	dwm.c	/^    int gappiv;         \/* vertical gap between windows *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
gappoh	config.def.h	/^static const unsigned int gappoh    = 10;       \/* horiz outer gap between windows and screen e/;"	v	typeref:typename:const unsigned int
gappoh	config.h	/^static const unsigned int gappoh    = 10;       \/* horiz outer gap between windows and screen e/;"	v	typeref:typename:const unsigned int
gappoh	dwm.c	/^    int gappoh;         \/* horizontal outer gaps *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
gappov	config.def.h	/^static const unsigned int gappov    = 10;       \/* vert outer gap between windows and screen ed/;"	v	typeref:typename:const unsigned int
gappov	config.h	/^static const unsigned int gappov    = 10;       \/* vert outer gap between windows and screen ed/;"	v	typeref:typename:const unsigned int
gappov	dwm.c	/^    int gappov;         \/* vertical outer gaps *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
gc	drw.h	/^	GC gc;$/;"	m	struct:__anon0f5116480308	typeref:typename:GC
getatomprop	dwm.c	/^Atom getatomprop(Client *c, Atom prop) {$/;"	f	typeref:typename:Atom
getrootptr	dwm.c	/^int getrootptr(int *x, int *y) {$/;"	f	typeref:typename:int
getstate	dwm.c	/^long getstate(Window w) {$/;"	f	typeref:typename:long
gettextprop	dwm.c	/^int gettextprop(Window w, Atom atom, char *text, unsigned int size) {$/;"	f	typeref:typename:int
grabbuttons	dwm.c	/^void grabbuttons(Client *c, int focused) {$/;"	f	typeref:typename:void
grabkeys	dwm.c	/^void grabkeys(void) {$/;"	f	typeref:typename:void
h	drw.h	/^	unsigned int h;$/;"	m	struct:Fnt	typeref:typename:unsigned int
h	drw.h	/^	unsigned int w, h;$/;"	m	struct:__anon0f5116480308	typeref:typename:unsigned int
h	dwm.c	/^    int x, y, w, h;$/;"	m	struct:Client	typeref:typename:int	file:
handler	dwm.c	/^static void (*handler[LASTEvent])(XEvent *) = {$/;"	v	typeref:typename:void (* [LASTEvent])(XEvent *)	file:
hide	dwm.c	/^void hide(const Arg *arg) {$/;"	f	typeref:typename:void
hidewin	dwm.c	/^void hidewin(Client *c) {$/;"	f	typeref:typename:void
hidsel	dwm.c	/^    int hidsel;$/;"	m	struct:Monitor	typeref:typename:int	file:
htop	config.def.h	/^static const char *htop[] = { "st", "htop", NULL };$/;"	v	typeref:typename:const char * []
htop	config.h	/^static const char *htop[] = { "st", "htop", NULL };$/;"	v	typeref:typename:const char * []
i	dwm.c	/^    int i;$/;"	m	union:__anon0f53a99e060a	typeref:typename:int	file:
inch	dwm.c	/^    int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	typeref:typename:int	file:
incnmaster	dwm.c	/^void incnmaster(const Arg *arg) {$/;"	f	typeref:typename:void
incrgaps	dwm.c	/^void incrgaps(const Arg *arg) {$/;"	f	typeref:typename:void
incrigaps	dwm.c	/^void incrigaps(const Arg *arg) {$/;"	f	typeref:typename:void
incrihgaps	dwm.c	/^void incrihgaps(const Arg *arg) {$/;"	f	typeref:typename:void
incrivgaps	dwm.c	/^void incrivgaps(const Arg *arg) {$/;"	f	typeref:typename:void
incrogaps	dwm.c	/^void incrogaps(const Arg *arg) {$/;"	f	typeref:typename:void
incrohgaps	dwm.c	/^void incrohgaps(const Arg *arg) {$/;"	f	typeref:typename:void
incrovgaps	dwm.c	/^void incrovgaps(const Arg *arg) {$/;"	f	typeref:typename:void
incw	dwm.c	/^    int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	typeref:typename:int	file:
install	Makefile	/^install: all$/;"	t
instance	dwm.c	/^    const char *instance;$/;"	m	struct:__anon0f53a99e0a08	typeref:typename:const char *	file:
isfixed	dwm.c	/^    int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen;$/;"	m	struct:Client	typeref:typename:int	file:
isfloating	dwm.c	/^    int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen;$/;"	m	struct:Client	typeref:typename:int	file:
isfloating	dwm.c	/^    int isfloating;$/;"	m	struct:__anon0f53a99e0a08	typeref:typename:int	file:
isfullscreen	dwm.c	/^    int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen;$/;"	m	struct:Client	typeref:typename:int	file:
isuniquegeom	dwm.c	/^static int isuniquegeom(XineramaScreenInfo *unique, size_t n,$/;"	f	typeref:typename:int	file:
isurgent	dwm.c	/^    int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen;$/;"	m	struct:Client	typeref:typename:int	file:
keyboard_setup	config.def.h	/^static const char *keyboard_setup[] = { "\/home\/blue\/.dwm\/keyboard-setup.sh", NULL };$/;"	v	typeref:typename:const char * []
keyboard_setup	config.h	/^static const char *keyboard_setup[] = { "\/home\/blue\/.dwm\/keyboard-setup.sh", NULL };$/;"	v	typeref:typename:const char * []
keypress	dwm.c	/^void keypress(XEvent *e) {$/;"	f	typeref:typename:void
keys	config.def.h	/^static Key keys[] = {$/;"	v	typeref:typename:Key[]
keys	config.h	/^static Key keys[] = {$/;"	v	typeref:typename:Key[]
keysym	dwm.c	/^    KeySym keysym;$/;"	m	struct:__anon0f53a99e0808	typeref:typename:KeySym	file:
killclient	dwm.c	/^void killclient(const Arg *arg) {$/;"	f	typeref:typename:void
layouts	config.def.h	/^static const Layout layouts[] = {$/;"	v	typeref:typename:const Layout[]
layouts	config.h	/^static const Layout layouts[] = {$/;"	v	typeref:typename:const Layout[]
limitexceeded	dwm.c	/^    char limitexceeded[LENGTH(tags) > 31 ? -1 : 1];$/;"	m	struct:NumTags	typeref:typename:char[]	file:
localshare	dwm.c	/^static const char localshare[] = ".local\/share";$/;"	v	typeref:typename:const char[]	file:
lockscreen	config.def.h	/^static const char *lockscreen[] = {"slock", NULL };$/;"	v	typeref:typename:const char * []
lockscreen	config.h	/^static const char *lockscreen[] = {"slock", NULL };$/;"	v	typeref:typename:const char * []
lrpad	dwm.c	/^static int lrpad;          \/* sum of left and right padding for text *\/$/;"	v	typeref:typename:int	file:
lt	dwm.c	/^    const Layout *lt[2];$/;"	m	struct:Monitor	typeref:typename:const Layout * [2]	file:
ltidxs	dwm.c	/^        *ltidxs[LENGTH(tags) + 1][2]; \/* matrix of tags and layouts indexes  *\/$/;"	m	struct:Pertag	typeref:typename:const Layout * [][2]	file:
ltsymbol	dwm.c	/^    char ltsymbol[16];$/;"	m	struct:Monitor	typeref:typename:char[16]	file:
main	dwm.c	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
main	transient.c	/^int main(void) {$/;"	f	typeref:typename:int
manage	dwm.c	/^void manage(Window w, XWindowAttributes *wa) {$/;"	f	typeref:typename:void
mappingnotify	dwm.c	/^void mappingnotify(XEvent *e) {$/;"	f	typeref:typename:void
maprequest	dwm.c	/^void maprequest(XEvent *e) {$/;"	f	typeref:typename:void
mask	dwm.c	/^    unsigned int mask;$/;"	m	struct:__anon0f53a99e0708	typeref:typename:unsigned int	file:
maxa	dwm.c	/^    float mina, maxa;$/;"	m	struct:Client	typeref:typename:float	file:
maxh	dwm.c	/^    int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	typeref:typename:int	file:
maxw	dwm.c	/^    int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	typeref:typename:int	file:
mfact	config.def.h	/^static const float mfact     = 0.5; \/* factor of master area size [0.05..0.95] *\/$/;"	v	typeref:typename:const float
mfact	config.h	/^static const float mfact     = 0.5; \/* factor of master area size [0.05..0.95] *\/$/;"	v	typeref:typename:const float
mfact	dwm.c	/^    float mfact;$/;"	m	struct:Monitor	typeref:typename:float	file:
mfacts	dwm.c	/^    float mfacts[LENGTH(tags) + 1]; \/* mfacts per tag *\/$/;"	m	struct:Pertag	typeref:typename:float[]	file:
mh	dwm.c	/^    int mx, my, mw, mh; \/* screen size *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
mina	dwm.c	/^    float mina, maxa;$/;"	m	struct:Client	typeref:typename:float	file:
minh	dwm.c	/^    int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	typeref:typename:int	file:
minw	dwm.c	/^    int basew, baseh, incw, inch, maxw, maxh, minw, minh;$/;"	m	struct:Client	typeref:typename:int	file:
mod	dwm.c	/^    unsigned int mod;$/;"	m	struct:__anon0f53a99e0808	typeref:typename:unsigned int	file:
mon	dwm.c	/^    Monitor *mon;$/;"	m	struct:Client	typeref:typename:Monitor *	file:
monitor	dwm.c	/^    int monitor;$/;"	m	struct:__anon0f53a99e0a08	typeref:typename:int	file:
monocle	dwm.c	/^void monocle(Monitor *m) {$/;"	f	typeref:typename:void
mons	dwm.c	/^static Monitor *mons, *selmon;$/;"	v	typeref:typename:Monitor *	file:
motionnotify	dwm.c	/^void motionnotify(XEvent *e) {$/;"	f	typeref:typename:void
movemouse	dwm.c	/^void movemouse(const Arg *arg) {$/;"	f	typeref:typename:void
mw	dwm.c	/^    int mx, my, mw, mh; \/* screen size *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
mx	dwm.c	/^    int mx, my, mw, mh; \/* screen size *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
my	dwm.c	/^    int mx, my, mw, mh; \/* screen size *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
name	dwm.c	/^    char name[256];$/;"	m	struct:Client	typeref:typename:char[256]	file:
netatom	dwm.c	/^static Atom wmatom[WMLast], netatom[NetLast];$/;"	v	typeref:typename:Atom[]	file:
network_manager	config.def.h	/^static const char *network_manager[] = {"\/home\/blue\/.dwm\/network-manager.sh", NULL};$/;"	v	typeref:typename:const char * []
network_manager	config.h	/^static const char *network_manager[] = {"\/home\/blue\/.dwm\/network-manager.sh", NULL};$/;"	v	typeref:typename:const char * []
neverfocus	dwm.c	/^    int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen;$/;"	m	struct:Client	typeref:typename:int	file:
next	drw.h	/^	struct Fnt *next;$/;"	m	struct:Fnt	typeref:struct:Fnt *
next	dwm.c	/^    Client *next;$/;"	m	struct:Client	typeref:typename:Client *	file:
next	dwm.c	/^    Monitor *next;$/;"	m	struct:Monitor	typeref:typename:Monitor *	file:
nexttiled	dwm.c	/^Client *nexttiled(Client *c) {$/;"	f	typeref:typename:Client *
nmaster	config.def.h	/^static const int nmaster     = 1;    \/* number of clients in master area *\/$/;"	v	typeref:typename:const int
nmaster	config.h	/^static const int nmaster     = 1;    \/* number of clients in master area *\/$/;"	v	typeref:typename:const int
nmaster	dwm.c	/^    int nmaster;$/;"	m	struct:Monitor	typeref:typename:int	file:
nmasters	dwm.c	/^    int nmasters[LENGTH(tags) + 1]; \/* number of windows in master area *\/$/;"	m	struct:Pertag	typeref:typename:int[]	file:
notepadcmd	config.def.h	/^static const char *notepadcmd[] = { "st", "-t", notepadname, "-g", "120x34", NULL };$/;"	v	typeref:typename:const char * []
notepadcmd	config.h	/^static const char *notepadcmd[] = { "st", "-t", notepadname, "-g", "120x34", NULL };$/;"	v	typeref:typename:const char * []
notepadname	config.def.h	/^static const char notepadname[] = "notepad";$/;"	v	typeref:typename:const char[]
notepadname	config.h	/^static const char notepadname[] = "notepad";$/;"	v	typeref:typename:const char[]
notetag	dwm.c	/^static unsigned int notetag = 1 << (LENGTH(tags) + 1);$/;"	v	typeref:typename:unsigned int	file:
num	dwm.c	/^    int num;$/;"	m	struct:Monitor	typeref:typename:int	file:
numlockmask	dwm.c	/^static unsigned int numlockmask = 0;$/;"	v	typeref:typename:unsigned int	file:
nvtop	config.def.h	/^static const char *nvtop[] = { "st", "nvtop", NULL };$/;"	v	typeref:typename:const char * []
nvtop	config.h	/^static const char *nvtop[] = { "st", "nvtop", NULL };$/;"	v	typeref:typename:const char * []
oldbw	dwm.c	/^    int bw, oldbw;$/;"	m	struct:Client	typeref:typename:int	file:
oldh	dwm.c	/^    int oldx, oldy, oldw, oldh;$/;"	m	struct:Client	typeref:typename:int	file:
oldstate	dwm.c	/^    int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen;$/;"	m	struct:Client	typeref:typename:int	file:
oldw	dwm.c	/^    int oldx, oldy, oldw, oldh;$/;"	m	struct:Client	typeref:typename:int	file:
oldx	dwm.c	/^    int oldx, oldy, oldw, oldh;$/;"	m	struct:Client	typeref:typename:int	file:
oldy	dwm.c	/^    int oldx, oldy, oldw, oldh;$/;"	m	struct:Client	typeref:typename:int	file:
options	Makefile	/^options:$/;"	t
pattern	drw.h	/^	FcPattern *pattern;$/;"	m	struct:Fnt	typeref:typename:FcPattern *
pertag	dwm.c	/^    Pertag *pertag;$/;"	m	struct:Monitor	typeref:typename:Pertag *	file:
pomodoro_start	config.def.h	/^static const char *pomodoro_start[] = { "\/home\/blue\/.dwm\/pomodoro-start.sh", NULL };$/;"	v	typeref:typename:const char * []
pomodoro_start	config.h	/^static const char *pomodoro_start[] = { "\/home\/blue\/.dwm\/pomodoro-start.sh", NULL };$/;"	v	typeref:typename:const char * []
pomodoro_stop	config.def.h	/^static const char *pomodoro_stop[] = { "\/home\/blue\/.dwm\/pomodoro-stop.sh", NULL };$/;"	v	typeref:typename:const char * []
pomodoro_stop	config.h	/^static const char *pomodoro_stop[] = { "\/home\/blue\/.dwm\/pomodoro-stop.sh", NULL };$/;"	v	typeref:typename:const char * []
pop	dwm.c	/^void pop(Client *c) {$/;"	f	typeref:typename:void
prevtag	dwm.c	/^    unsigned int curtag, prevtag;   \/* current and previous tag *\/$/;"	m	struct:Pertag	typeref:typename:unsigned int	file:
propertynotify	dwm.c	/^void propertynotify(XEvent *e) {$/;"	f	typeref:typename:void
quit	dwm.c	/^void quit(const Arg *arg) {$/;"	f	typeref:typename:void
recttomon	dwm.c	/^Monitor *recttomon(int x, int y, int w, int h) {$/;"	f	typeref:typename:Monitor *
redshift_down	config.def.h	/^static const char *redshift_down[] = {"\/home\/blue\/.dwm\/redshift-down.sh", NULL};$/;"	v	typeref:typename:const char * []
redshift_down	config.h	/^static const char *redshift_down[] = {"\/home\/blue\/.dwm\/redshift-down.sh", NULL};$/;"	v	typeref:typename:const char * []
redshift_up	config.def.h	/^static const char *redshift_up[] = {"\/home\/blue\/.dwm\/redshift-up.sh", NULL};$/;"	v	typeref:typename:const char * []
redshift_up	config.h	/^static const char *redshift_up[] = {"\/home\/blue\/.dwm\/redshift-up.sh", NULL};$/;"	v	typeref:typename:const char * []
resize	dwm.c	/^void resize(Client *c, int x, int y, int w, int h, int interact) {$/;"	f	typeref:typename:void
resizeclient	dwm.c	/^void resizeclient(Client *c, int x, int y, int w, int h) {$/;"	f	typeref:typename:void
resizehints	config.def.h	/^static const int resizehints = 0;    \/* 1 means respect size hints in tiled resizals *\/$/;"	v	typeref:typename:const int
resizehints	config.h	/^static const int resizehints = 0;    \/* 1 means respect size hints in tiled resizals *\/$/;"	v	typeref:typename:const int
resizemouse	dwm.c	/^void resizemouse(const Arg *arg) {$/;"	f	typeref:typename:void
restack	dwm.c	/^void restack(Monitor *m) {$/;"	f	typeref:typename:void
root	drw.h	/^	Window root;$/;"	m	struct:__anon0f5116480308	typeref:typename:Window
root	dwm.c	/^static Window root, wmcheckwin;$/;"	v	typeref:typename:Window	file:
rules	config.def.h	/^static const Rule rules[] = {$/;"	v	typeref:typename:const Rule[]
rules	config.h	/^static const Rule rules[] = {$/;"	v	typeref:typename:const Rule[]
run	dwm.c	/^void run(void) {$/;"	f	typeref:typename:void
runautostart	dwm.c	/^void runautostart(void) {$/;"	f	typeref:typename:void
running	dwm.c	/^static int running = 1;$/;"	v	typeref:typename:int	file:
scan	dwm.c	/^void scan(void) {$/;"	f	typeref:typename:void
scheme	drw.h	/^	Clr *scheme;$/;"	m	struct:__anon0f5116480308	typeref:typename:Clr *
scheme	dwm.c	/^static Clr **scheme;$/;"	v	typeref:typename:Clr **	file:
scratchpadcmd	config.def.h	/^static const char *scratchpadcmd[] = { "st", "-t", scratchpadname, "-g", "120x34", NULL };$/;"	v	typeref:typename:const char * []
scratchpadcmd	config.h	/^static const char *scratchpadcmd[] = { "st", "-t", scratchpadname, "-g", "120x34", NULL };$/;"	v	typeref:typename:const char * []
scratchpadname	config.def.h	/^static const char scratchpadname[] = "scratchpad";$/;"	v	typeref:typename:const char[]
scratchpadname	config.h	/^static const char scratchpadname[] = "scratchpad";$/;"	v	typeref:typename:const char[]
scratchtag	dwm.c	/^static unsigned int scratchtag = 1 << LENGTH(tags);$/;"	v	typeref:typename:unsigned int	file:
screen	drw.h	/^	int screen;$/;"	m	struct:__anon0f5116480308	typeref:typename:int
screen	dwm.c	/^static int screen;         \/\/ default screen$/;"	v	typeref:typename:int	file:
screenshotcmd	config.def.h	/^static const char *screenshotcmd[] = { "\/home\/blue\/.dwm\/flameshot.sh", NULL };$/;"	v	typeref:typename:const char * []
screenshotcmd	config.h	/^static const char *screenshotcmd[] = { "\/home\/blue\/.dwm\/flameshot.sh", NULL };$/;"	v	typeref:typename:const char * []
sel	dwm.c	/^    Client *sel;$/;"	m	struct:Monitor	typeref:typename:Client *	file:
sellt	dwm.c	/^    unsigned int sellt;$/;"	m	struct:Monitor	typeref:typename:unsigned int	file:
sellts	dwm.c	/^    unsigned int sellts[LENGTH(tags) + 1]; \/* selected layouts *\/$/;"	m	struct:Pertag	typeref:typename:unsigned int[]	file:
selmon	dwm.c	/^static Monitor *mons, *selmon;$/;"	v	typeref:typename:Monitor *	file:
seltags	dwm.c	/^    unsigned int seltags;$/;"	m	struct:Monitor	typeref:typename:unsigned int	file:
sendevent	dwm.c	/^int sendevent(Client *c, Atom proto) {$/;"	f	typeref:typename:int
sendmon	dwm.c	/^void sendmon(Client *c, Monitor *m) {$/;"	f	typeref:typename:void
setclientstate	dwm.c	/^void setclientstate(Client *c, long state) {$/;"	f	typeref:typename:void
setfocus	dwm.c	/^void setfocus(Client *c) {$/;"	f	typeref:typename:void
setfullscreen	dwm.c	/^void setfullscreen(Client *c, int fullscreen) {$/;"	f	typeref:typename:void
setgaps	dwm.c	/^void setgaps(int oh, int ov, int ih, int iv) {$/;"	f	typeref:typename:void
setlayout	dwm.c	/^void setlayout(const Arg *arg) {$/;"	f	typeref:typename:void
setmfact	dwm.c	/^void setmfact(const Arg *arg) {$/;"	f	typeref:typename:void
setup	dwm.c	/^void setup(void) {$/;"	f	typeref:typename:void
seturgent	dwm.c	/^void seturgent(Client *c, int urg) {$/;"	f	typeref:typename:void
sh	dwm.c	/^static int sw, sh;         \/* X display screen geometry width, height *\/$/;"	v	typeref:typename:int	file:
show	dwm.c	/^void show(const Arg *arg) {$/;"	f	typeref:typename:void
showbar	config.def.h	/^static const int showbar            = 1;        \/* 0 means no bar *\/$/;"	v	typeref:typename:const int
showbar	config.h	/^static const int showbar            = 1;        \/* 0 means no bar *\/$/;"	v	typeref:typename:const int
showbar	dwm.c	/^    int showbar;$/;"	m	struct:Monitor	typeref:typename:int	file:
showbars	dwm.c	/^    int showbars[LENGTH(tags) + 1];   \/* display bar for the current tag *\/$/;"	m	struct:Pertag	typeref:typename:int[]	file:
showhide	dwm.c	/^void showhide(Client *c) {$/;"	f	typeref:typename:void
showwin	dwm.c	/^void showwin(Client *c) {$/;"	f	typeref:typename:void
sigchld	dwm.c	/^void sigchld(int unused) {$/;"	f	typeref:typename:void
smartgaps	config.def.h	/^static const int smartgaps          = 0;        \/* 1 means no outer gap when there is only one /;"	v	typeref:typename:const int
smartgaps	config.h	/^static const int smartgaps          = 0;        \/* 1 means no outer gap when there is only one /;"	v	typeref:typename:const int
snap	config.def.h	/^static const unsigned int snap      = 32;       \/* snap pixel *\/$/;"	v	typeref:typename:const unsigned int
snap	config.h	/^static const unsigned int snap      = 32;       \/* snap pixel *\/$/;"	v	typeref:typename:const unsigned int
snext	dwm.c	/^    Client *snext;$/;"	m	struct:Client	typeref:typename:Client *	file:
sound_manager	config.def.h	/^static const char *sound_manager[] = {"\/home\/blue\/.dwm\/sound-manager.sh", NULL};$/;"	v	typeref:typename:const char * []
sound_manager	config.h	/^static const char *sound_manager[] = {"\/home\/blue\/.dwm\/sound-manager.sh", NULL};$/;"	v	typeref:typename:const char * []
spawn	dwm.c	/^void spawn(const Arg *arg) {$/;"	f	typeref:typename:void
stack	dwm.c	/^    Client *stack;$/;"	m	struct:Monitor	typeref:typename:Client *	file:
stext	dwm.c	/^static char stext[256];$/;"	v	typeref:typename:char[256]	file:
suspend	config.def.h	/^static const char *suspend[] = { "\/home\/blue\/.dwm\/suspend.sh", NULL };$/;"	v	typeref:typename:const char * []
suspend	config.h	/^static const char *suspend[] = { "\/home\/blue\/.dwm\/suspend.sh", NULL };$/;"	v	typeref:typename:const char * []
sw	dwm.c	/^static int sw, sh;         \/* X display screen geometry width, height *\/$/;"	v	typeref:typename:int	file:
symbol	dwm.c	/^    const char *symbol;$/;"	m	struct:__anon0f53a99e0908	typeref:typename:const char *	file:
tag	dwm.c	/^void tag(const Arg *arg) {$/;"	f	typeref:typename:void
tagmon	dwm.c	/^void tagmon(const Arg *arg) {$/;"	f	typeref:typename:void
tags	config.def.h	/^static const char *tags[] = { "🗗 ", "🖹 ", "3", "4", "5", "🎧", "📺", "🖺", "🌏" };$/;"	v	typeref:typename:const char * []
tags	config.h	/^static const char *tags[] = { "🗗 ", "🖹 ", "3", "4", "5", "🎧", "📺", "🖺", "🌏" };$/;"	v	typeref:typename:const char * []
tags	dwm.c	/^    unsigned int tags;$/;"	m	struct:Client	typeref:typename:unsigned int	file:
tags	dwm.c	/^    unsigned int tags;$/;"	m	struct:__anon0f53a99e0a08	typeref:typename:unsigned int	file:
tagset	dwm.c	/^    unsigned int tagset[2];$/;"	m	struct:Monitor	typeref:typename:unsigned int[2]	file:
termcmd	config.def.h	/^static const char *termcmd[]  = { "st", NULL };$/;"	v	typeref:typename:const char * []
termcmd	config.h	/^static const char *termcmd[]  = { "st", NULL };$/;"	v	typeref:typename:const char * []
tile	dwm.c	/^void tile(Monitor *m) {$/;"	f	typeref:typename:void
title	dwm.c	/^    const char *title;$/;"	m	struct:__anon0f53a99e0a08	typeref:typename:const char *	file:
togglebar	dwm.c	/^void togglebar(const Arg *arg) {$/;"	f	typeref:typename:void
togglefloating	dwm.c	/^void togglefloating(const Arg *arg) {$/;"	f	typeref:typename:void
togglegaps	dwm.c	/^void togglegaps(const Arg *arg) {$/;"	f	typeref:typename:void
togglenote	dwm.c	/^void togglenote(const Arg *arg) {$/;"	f	typeref:typename:void
togglescratch	dwm.c	/^void togglescratch(const Arg *arg) {$/;"	f	typeref:typename:void
toggletag	dwm.c	/^void toggletag(const Arg *arg) {$/;"	f	typeref:typename:void
toggleview	dwm.c	/^void toggleview(const Arg *arg) {$/;"	f	typeref:typename:void
togglewin	dwm.c	/^void togglewin(const Arg *arg) {$/;"	f	typeref:typename:void
topbar	config.def.h	/^static const int topbar             = 1;        \/* 0 means bottom bar *\/$/;"	v	typeref:typename:const int
topbar	config.h	/^static const int topbar             = 1;        \/* 0 means bottom bar *\/$/;"	v	typeref:typename:const int
topbar	dwm.c	/^    int topbar;$/;"	m	struct:Monitor	typeref:typename:int	file:
ui	dwm.c	/^    unsigned int ui;$/;"	m	union:__anon0f53a99e060a	typeref:typename:unsigned int	file:
unfocus	dwm.c	/^void unfocus(Client *c, int setfocus) {$/;"	f	typeref:typename:void
uninstall	Makefile	/^uninstall:$/;"	t
unmanage	dwm.c	/^void unmanage(Client *c, int destroyed) {$/;"	f	typeref:typename:void
unmapnotify	dwm.c	/^void unmapnotify(XEvent *e) {$/;"	f	typeref:typename:void
updatebarpos	dwm.c	/^void updatebarpos(Monitor *m) {$/;"	f	typeref:typename:void
updatebars	dwm.c	/^void updatebars(void) {$/;"	f	typeref:typename:void
updateclientlist	dwm.c	/^void updateclientlist() {$/;"	f	typeref:typename:void
updategeom	dwm.c	/^int updategeom(void) {$/;"	f	typeref:typename:int
updatenumlockmask	dwm.c	/^void updatenumlockmask(void) {$/;"	f	typeref:typename:void
updatesizehints	dwm.c	/^void updatesizehints(Client *c) {$/;"	f	typeref:typename:void
updatestatus	dwm.c	/^void updatestatus(void) {$/;"	f	typeref:typename:void
updatetitle	dwm.c	/^void updatetitle(Client *c) {$/;"	f	typeref:typename:void
updatewindowtype	dwm.c	/^void updatewindowtype(Client *c) {$/;"	f	typeref:typename:void
updatewmhints	dwm.c	/^void updatewmhints(Client *c) {$/;"	f	typeref:typename:void
useargb	dwm.c	/^static int useargb = 0;$/;"	v	typeref:typename:int	file:
utf8decode	drw.c	/^static size_t utf8decode(const char *c, long *u, size_t clen) {$/;"	f	typeref:typename:size_t	file:
utf8decodebyte	drw.c	/^static long utf8decodebyte(const char c, size_t *i) {$/;"	f	typeref:typename:long	file:
utf8validate	drw.c	/^static size_t utf8validate(long *u, size_t i) {$/;"	f	typeref:typename:size_t	file:
utfbyte	drw.c	/^static const unsigned char utfbyte[UTF_SIZ + 1] = {0x80, 0, 0xC0, 0xE0, 0xF0};$/;"	v	typeref:typename:const unsigned char[]	file:
utfmask	drw.c	/^static const unsigned char utfmask[UTF_SIZ + 1] = {0xC0, 0x80, 0xE0, 0xF0,$/;"	v	typeref:typename:const unsigned char[]	file:
utfmax	drw.c	/^static const long utfmax[UTF_SIZ + 1] = {0x10FFFF, 0x7F, 0x7FF, 0xFFFF,$/;"	v	typeref:typename:const long[]	file:
utfmin	drw.c	/^static const long utfmin[UTF_SIZ + 1] = {0, 0, 0x80, 0x800, 0x10000};$/;"	v	typeref:typename:const long[]	file:
v	dwm.c	/^    const void *v;$/;"	m	union:__anon0f53a99e060a	typeref:typename:const void *	file:
view	dwm.c	/^void view(const Arg *arg) {$/;"	f	typeref:typename:void
viewontag	config.def.h	/^static const Bool viewontag         = True;     \/* Switch view on tag switch *\/$/;"	v	typeref:typename:const Bool
viewontag	config.h	/^static const Bool viewontag         = True;     \/* Switch view on tag switch *\/$/;"	v	typeref:typename:const Bool
visual	drw.h	/^	Visual *visual;$/;"	m	struct:__anon0f5116480308	typeref:typename:Visual *
visual	dwm.c	/^static Visual *visual;$/;"	v	typeref:typename:Visual *	file:
voldownscript	config.def.h	/^static const char *voldownscript[] = {"\/home\/blue\/.dwm\/vol-down.sh", NULL};$/;"	v	typeref:typename:const char * []
voldownscript	config.h	/^static const char *voldownscript[] = {"\/home\/blue\/.dwm\/vol-down.sh", NULL};$/;"	v	typeref:typename:const char * []
voltogglescript	config.def.h	/^static const char *voltogglescript[] = {"\/home\/blue\/.dwm\/vol-toggle.sh", NULL};$/;"	v	typeref:typename:const char * []
voltogglescript	config.h	/^static const char *voltogglescript[] = {"\/home\/blue\/.dwm\/vol-toggle.sh", NULL};$/;"	v	typeref:typename:const char * []
volupscript	config.def.h	/^static const char *volupscript[] = {"\/home\/blue\/.dwm\/vol-up.sh", NULL};$/;"	v	typeref:typename:const char * []
volupscript	config.h	/^static const char *volupscript[] = {"\/home\/blue\/.dwm\/vol-up.sh", NULL};$/;"	v	typeref:typename:const char * []
w	drw.h	/^	unsigned int w, h;$/;"	m	struct:__anon0f5116480308	typeref:typename:unsigned int
w	dwm.c	/^    int x, y, w, h;$/;"	m	struct:Client	typeref:typename:int	file:
wh	dwm.c	/^    int wx, wy, ww, wh; \/* window area  *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
win	dwm.c	/^    Window win;$/;"	m	struct:Client	typeref:typename:Window	file:
wintoclient	dwm.c	/^Client *wintoclient(Window w) {$/;"	f	typeref:typename:Client *
wintomon	dwm.c	/^Monitor *wintomon(Window w) {$/;"	f	typeref:typename:Monitor *
wmatom	dwm.c	/^static Atom wmatom[WMLast], netatom[NetLast];$/;"	v	typeref:typename:Atom[]	file:
wmcheckwin	dwm.c	/^static Window root, wmcheckwin;$/;"	v	typeref:typename:Window	file:
ww	dwm.c	/^    int wx, wy, ww, wh; \/* window area  *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
wx	dwm.c	/^    int wx, wy, ww, wh; \/* window area  *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
wy	dwm.c	/^    int wx, wy, ww, wh; \/* window area  *\/$/;"	m	struct:Monitor	typeref:typename:int	file:
x	dwm.c	/^    int x, y, w, h;$/;"	m	struct:Client	typeref:typename:int	file:
xerror	dwm.c	/^int xerror(Display *dpy, XErrorEvent *ee) {$/;"	f	typeref:typename:int
xerrordummy	dwm.c	/^int xerrordummy(Display *dpy, XErrorEvent *ee) { return 0; }$/;"	f	typeref:typename:int
xerrorstart	dwm.c	/^int xerrorstart(Display *dpy, XErrorEvent *ee) {$/;"	f	typeref:typename:int
xerrorxlib	dwm.c	/^static int (*xerrorxlib)(Display *, XErrorEvent *);$/;"	v	typeref:typename:int (*)(Display *,XErrorEvent *)	file:
xfont	drw.h	/^	XftFont *xfont;$/;"	m	struct:Fnt	typeref:typename:XftFont *
xfont_create	drw.c	/^static Fnt *xfont_create(Drw *drw, const char *fontname,$/;"	f	typeref:typename:Fnt *	file:
xfont_free	drw.c	/^static void xfont_free(Fnt *font) {$/;"	f	typeref:typename:void	file:
xinitvisual	dwm.c	/^void xinitvisual() {$/;"	f	typeref:typename:void
y	dwm.c	/^    int x, y, w, h;$/;"	m	struct:Client	typeref:typename:int	file:
zoom	dwm.c	/^void zoom(const Arg *arg) {$/;"	f	typeref:typename:void
